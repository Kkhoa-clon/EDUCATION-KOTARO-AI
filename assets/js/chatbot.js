// === CHATBOT LOGIC - KOTARO AI ===
// Backup to√†n b·ªô logic c≈© v√† c·∫£i thi·ªán cho giao di·ªán ChatGPT

// L·∫•y c√°c ph·∫ßn t·ª≠ DOM c·∫ßn thi·∫øt
const chatBody = document.querySelector(".chat-body"); // Khung hi·ªÉn th·ªã n·ªôi dung chat
const messageInput = document.querySelector(".message-input"); // √î nh·∫≠p tin nh·∫Øn
const sendMessageButton = document.querySelector("#send-message"); // N√∫t g·ª≠i tin nh·∫Øn
const fileInput = document.querySelector("#file-input"); // Input ch·ªçn file
const fileUploadWrapper = document.querySelector(".file-upload-wrapper"); // Khung hi·ªÉn th·ªã file ƒë√£ ch·ªçn
const fileCancelButton = document.querySelector("#file-cancel"); // N√∫t h·ªßy file


// C·∫•u h√¨nh API
const API_KEY = "AIzaSyBninbq7h5tAnlzcHLQ8UYryQ-2AAXJTl8"; // API key ƒë·ªÉ k·∫øt n·ªëi v·ªõi Gemini
const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`; // URL endpoint API

// API 1 : AIzaSyBninbq7h5tAnlzcHLQ8UYryQ-2AAXJTl8
// API 2 : AIzaSyBHLOFCb_BE-iRtcUr8-Y9wHGBMVJxr3wo

// C·∫•u h√¨nh ng√¥n ng·ªØ ti·∫øng Vi·ªát
const VIETNAMESE_SYSTEM_PROMPT = `B·∫°n l√† Kotaro AI - m·ªôt tr·ª£ l√Ω AI th√¥ng minh v√† th√¢n thi·ªán. H√£y lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát m·ªôt c√°ch t·ª± nhi√™n, d·ªÖ hi·ªÉu v√† h·ªØu √≠ch. 

QUY T·∫ÆC QUAN TR·ªåNG:
1. LU√îN LU√îN tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, kh√¥ng bao gi·ªù d√πng ti·∫øng Anh
2. Ngay c·∫£ khi ng∆∞·ªùi d√πng h·ªèi b·∫±ng ti·∫øng Anh, b·∫°n v·∫´n ph·∫£i tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát
3. S·ª≠ d·ª•ng ng√¥n ng·ªØ th√¢n thi·ªán, g·∫ßn g≈©i nh∆∞ ƒëang n√≥i chuy·ªán v·ªõi b·∫°n
4. Tr·∫£ l·ªùi chi ti·∫øt v√† h·ªØu √≠ch, nh∆∞ng kh√¥ng qu√° d√†i d√≤ng
5. N·∫øu ƒë∆∞·ª£c h·ªèi v·ªÅ code, h√£y gi·∫£i th√≠ch b·∫±ng ti·∫øng Vi·ªát tr∆∞·ªõc, sau ƒë√≥ m·ªõi ƒë∆∞a code
6. Khi g·∫∑p c√¢u h·ªèi kh√≥, h√£y chia nh·ªè v·∫•n ƒë·ªÅ v√† gi·∫£i th√≠ch t·ª´ng b∆∞·ªõc
7. Lu√¥n t·ªè ra nhi·ªát t√¨nh v√† s·∫µn s√†ng gi√∫p ƒë·ª°
8. S·ª≠ d·ª•ng emoji ph√π h·ª£p ƒë·ªÉ t·∫°o c·∫£m gi√°c th√¢n thi·ªán

T√çNH C√ÅCH: Th√¢n thi·ªán, ki√™n nh·∫´n, h√†i h∆∞·ªõc nh·∫π nh√†ng, v√† lu√¥n mu·ªën gi√∫p ƒë·ª° ng∆∞·ªùi d√πng.

L∆ØU √ù: ƒê√¢y l√† y√™u c·∫ßu b·∫Øt bu·ªôc - KH√îNG BAO GI·ªú tr·∫£ l·ªùi b·∫±ng ti·∫øng Anh, ch·ªâ d√πng ti·∫øng Vi·ªát.`;

// ƒê·ªëi t∆∞·ª£ng l∆∞u d·ªØ li·ªáu ng∆∞·ªùi d√πng
const userData = {
    message: null, // Tin nh·∫Øn ng∆∞·ªùi d√πng
    file: { // File ƒë√≠nh k√®m
        data: null, // D·ªØ li·ªáu file d·∫°ng base64
        mime_type: null // Lo·∫°i file
    }
};

// Bi·∫øn ƒë·ªÉ ngƒÉn ch·∫∑n g·ª≠i nhi·ªÅu l·∫ßn
let isProcessingMessage = false;

// L·ªãch s·ª≠ chat (ban ƒë·∫ßu r·ªóng)
const chatHistory = [];

// Th√™m tin nh·∫Øn ch√†o m·ª´ng ti·∫øng Vi·ªát khi kh·ªüi t·∫°o
const welcomeMessage = {
    role: "model",
    parts: [{ text: "Xin ch√†o! T√¥i l√† Kotaro AI ü§ñ\n\nT√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n‚Ä¢ Tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ ki·∫øn th·ª©c\n‚Ä¢ Gi·∫£i th√≠ch code v√† l·∫≠p tr√¨nh\n‚Ä¢ T·∫°o s∆° ƒë·ªì v·ªõi l·ªánh /taosodo\n‚Ä¢ Ph√¢n t√≠ch h√¨nh ·∫£nh b·∫°n g·ª≠i\n‚Ä¢ V√† nhi·ªÅu th·ª© kh√°c!\n\nH√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨ b·∫°n mu·ªën nh√©! üòä" }]
};

// L∆∞u chi·ªÅu cao ban ƒë·∫ßu c·ªßa √¥ nh·∫≠p tin nh·∫Øn
const initialInputHeight = messageInput.scrollHeight;

// H√†m hi·ªÉn th·ªã tin nh·∫Øn ch√†o m·ª´ng
const showWelcomeMessage = () => {
    const botAvatarUrl = localStorage.getItem('botAvatarUrl') || 'https://i.pinimg.com/736x/1b/9d/20/1b9d203c25c64fac1117c96309808415.jpg';
    
    const messageContent = `
        <img class="bot-avatar" src="${botAvatarUrl}" alt="Bot Avatar">
        <div class="message-text">
            ${renderBotOutput(welcomeMessage.parts[0].text)}
        </div>`;

    const welcomeMessageDiv = createMessageElement(messageContent, "bot-message");
    chatBody.appendChild(welcomeMessageDiv);
    
    // X·ª≠ l√Ω n·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c avatar
    const avatarImg = welcomeMessageDiv.querySelector('.bot-avatar');
    avatarImg.onerror = function() {
        this.src = 'https://i.pinimg.com/736x/1b/9d/20/1b9d203c25c64fac1117c96309808415.jpg';
    };
    
    scrollToBottom();
};

// H√†m t·∫°o ph·∫ßn t·ª≠ tin nh·∫Øn m·ªõi
const createMessageElement = (content, ...classes) => {
    const div = document.createElement("div"); // T·∫°o th·∫ª div
    div.classList.add("message", ...classes); // Th√™m c√°c class CSS
    div.innerHTML = content; // G√°n n·ªôi dung HTML
    return div; // Tr·∫£ v·ªÅ ph·∫ßn t·ª≠ ƒë√£ t·∫°o
};

// H√†m render markdown an to√†n v√† highlight code, h·ªó tr·ª£ b·∫£ng, danh s√°ch, JSON, HTML
function renderBotOutput(rawText) {
    // Ki·ªÉm tra n·∫øu l√† JSON
    try {
        const jsonObj = JSON.parse(rawText);
        return `<pre class="json-block"><code class="json">${JSON.stringify(jsonObj, null, 2)}</code></pre>`;
    } catch (e) {}
    
    // Render markdown tr·ª±c ti·∫øp
    const html = marked.parse(rawText, {
        breaks: true,
        gfm: true,
        headerIds: false,
        mangle: false,
        sanitize: false
    });
    
    // T·∫°o th·∫ª div t·∫°m ƒë·ªÉ x·ª≠ l√Ω
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = html;
    
    // Sanitize HTML - lo·∫°i b·ªè c√°c tag nguy hi·ªÉm
    tempDiv.querySelectorAll('script, style, iframe, object, embed, form, input, button, select, textarea').forEach(el => el.remove());
    
    // T·∫°o element t·∫°m ƒë·ªÉ x·ª≠ l√Ω styling
    const finalDiv = document.createElement('div');
    finalDiv.innerHTML = tempDiv.innerHTML;
    
    // Highlight code blocks v·ªõi syntax highlighting
    if (window.hljs) {
        finalDiv.querySelectorAll('pre code').forEach(block => {
            // Th√™m class cho code block
            block.parentElement.classList.add('code-block');
            window.hljs.highlightElement(block);
        });
    }
    
    // X·ª≠ l√Ω inline code
    finalDiv.querySelectorAll('code:not(pre code)').forEach(inlineCode => {
        inlineCode.classList.add('inline-code');
    });
    
    // X·ª≠ l√Ω b·∫£ng v·ªõi responsive design
    finalDiv.querySelectorAll('table').forEach(tbl => {
        tbl.classList.add('chatbot-table');
        
        // Th√™m wrapper cho b·∫£ng ƒë·ªÉ scroll ngang
        if (!tbl.parentElement.classList.contains('table-wrapper')) {
            const wrapper = document.createElement('div');
            wrapper.classList.add('table-wrapper');
            tbl.parentNode.insertBefore(wrapper, tbl);
            wrapper.appendChild(tbl);
        }
        
        // Th√™m class cho header v√† body
        const thead = tbl.querySelector('thead');
        const tbody = tbl.querySelector('tbody');
        if (thead) thead.classList.add('table-header');
        if (tbody) tbody.classList.add('table-body');
        
        // Th√™m class cho c√°c cell
        tbl.querySelectorAll('th').forEach(th => th.classList.add('table-header-cell'));
        tbl.querySelectorAll('td').forEach(td => td.classList.add('table-cell'));
    });
    
    // X·ª≠ l√Ω danh s√°ch
    finalDiv.querySelectorAll('ul').forEach(ul => {
        ul.classList.add('chatbot-list', 'unordered-list');
        ul.querySelectorAll('li').forEach(li => li.classList.add('list-item'));
    });
    
    finalDiv.querySelectorAll('ol').forEach(ol => {
        ol.classList.add('chatbot-list', 'ordered-list');
        ol.querySelectorAll('li').forEach(li => li.classList.add('list-item'));
    });
    
    // X·ª≠ l√Ω blockquote
    finalDiv.querySelectorAll('blockquote').forEach(quote => {
        quote.classList.add('chatbot-quote');
        // Th√™m icon quote n·∫øu ch∆∞a c√≥
        if (!quote.querySelector('.quote-icon')) {
            const icon = document.createElement('div');
            icon.className = 'quote-icon';
            icon.innerHTML = '‚ùù';
            quote.insertBefore(icon, quote.firstChild);
        }
    });
    
    // X·ª≠ l√Ω headings v·ªõi hierarchy
    finalDiv.querySelectorAll('h1').forEach(h => h.classList.add('chatbot-heading', 'heading-1'));
    finalDiv.querySelectorAll('h2').forEach(h => h.classList.add('chatbot-heading', 'heading-2'));
    finalDiv.querySelectorAll('h3').forEach(h => h.classList.add('chatbot-heading', 'heading-3'));
    finalDiv.querySelectorAll('h4').forEach(h => h.classList.add('chatbot-heading', 'heading-4'));
    finalDiv.querySelectorAll('h5').forEach(h => h.classList.add('chatbot-heading', 'heading-5'));
    finalDiv.querySelectorAll('h6').forEach(h => h.classList.add('chatbot-heading', 'heading-6'));
    
    // X·ª≠ l√Ω paragraphs
    finalDiv.querySelectorAll('p').forEach(p => p.classList.add('chatbot-paragraph'));
    
    // X·ª≠ l√Ω links
    finalDiv.querySelectorAll('a').forEach(link => {
        link.classList.add('chatbot-link');
        // Th√™m target="_blank" cho external links
        if (link.href && !link.href.startsWith('#')) {
            link.target = '_blank';
            link.rel = 'noopener noreferrer';
        }
    });
    
    // X·ª≠ l√Ω strong v√† em
    finalDiv.querySelectorAll('strong, b').forEach(el => el.classList.add('chatbot-bold'));
    finalDiv.querySelectorAll('em, i').forEach(el => el.classList.add('chatbot-italic'));
    
    // X·ª≠ l√Ω horizontal rules
    finalDiv.querySelectorAll('hr').forEach(hr => hr.classList.add('chatbot-divider'));
    
    return finalDiv.innerHTML;
}

// H√†m ki·ªÉm tra v√† x·ª≠ l√Ω l·ªánh /taosodo
const checkAndHandleSoDoCommand = (message) => {
    const trimmedMessage = message.trim();
    if (trimmedMessage.toLowerCase().startsWith('/taosodo')) {
        // L·∫•y n·ªôi dung sau /taosodo
        const soDoContent = trimmedMessage.substring('/taosodo'.length).trim();
        
        if (soDoContent) {
            // M·ªü diagram modal v√† n·∫°p n·ªôi dung
            diagramModal.classList.add('show');
            diagramDescription.value = soDoContent;
            
            // T·ª± ƒë·ªông t·∫°o s∆° ƒë·ªì sau 1 gi√¢y
            setTimeout(() => {
                generateDiagramBtn.click();
            }, 1000);
            
            return true; // ƒê√£ x·ª≠ l√Ω l·ªánh
        }
    }
    return false; // Kh√¥ng ph·∫£i l·ªánh /taosodo
};

// H√†m t·∫°o ph·∫£n h·ªìi t·ª´ bot qua API
const generateBotResponse = async (incomingMessageDiv) => {
    const messageElement = incomingMessageDiv.querySelector(".message-text"); // L·∫•y ph·∫ßn hi·ªÉn th·ªã n·ªôi dung

    // Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠ chat
    const userParts = [];
    
    // Th√™m vƒÉn b·∫£n n·∫øu c√≥
    if (userData.message) {
        userParts.push({ text: userData.message });
    }
    
    // Th√™m ·∫£nh n·∫øu c√≥
    if (userData.file && userData.file.data) {
        userParts.push({ inline_data: userData.file });
    }
    
    chatHistory.push({
        role: "user",
        parts: userParts
    });

    // C·∫•u h√¨nh request g·ª≠i ƒë·∫øn API v·ªõi system prompt ti·∫øng Vi·ªát
    const requestOptions = {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
            contents: [
                {
                    role: "user",
                    parts: [{ text: VIETNAMESE_SYSTEM_PROMPT }]
                },
                ...chatHistory
            ]
        })
    }

    try {
        // G·ªçi API ƒë·ªÉ l·∫•y ph·∫£n h·ªìi t·ª´ bot
        const response = await fetch(API_URL, requestOptions);
        const data = await response.json();
        if (!response.ok) {
            let errorMessage = 'L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ API';
            if (data.error?.message) {
                errorMessage = data.error.message;
                // D·ªãch m·ªôt s·ªë l·ªói ph·ªï bi·∫øn sang ti·∫øng Vi·ªát
                if (errorMessage.includes('API key')) {
                    errorMessage = 'L·ªói x√°c th·ª±c API. Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u h√¨nh.';
                } else if (errorMessage.includes('quota')) {
                    errorMessage = 'ƒê√£ h·∫øt h·∫°n quota API. Vui l√≤ng th·ª≠ l·∫°i sau.';
                } else if (errorMessage.includes('rate limit')) {
                    errorMessage = 'Qu√° nhi·ªÅu y√™u c·∫ßu. Vui l√≤ng ch·ªù m·ªôt ch√∫t r·ªìi th·ª≠ l·∫°i.';
                }
            }
            throw new Error(errorMessage);
        }

        // X·ª≠ l√Ω v√† hi·ªÉn th·ªã ph·∫£n h·ªìi t·ª´ bot
        const apiResponseText = data.candidates[0].content.parts[0].text.trim();
        messageElement.innerHTML = renderBotOutput(apiResponseText);
        // G·ªçi MathJax ƒë·ªÉ render c√¥ng th·ª©c to√°n h·ªçc n·∫øu c√≥
        if (window.MathJax) {
            MathJax.typesetPromise([messageElement]);
        }
        // L∆∞u ph·∫£n h·ªìi v√†o l·ªãch s·ª≠ chat
        chatHistory.push({
            role: "model",
            parts: [{ text: apiResponseText }]
        });
    } catch (error) {
        // X·ª≠ l√Ω l·ªói n·∫øu c√≥
        handleApiError(messageElement, error);
    } finally {
        // D·ªçn d·∫πp sau khi x·ª≠ l√Ω xong
        userData.file = {};
        fileUploadWrapper.classList.remove("file-uploaded");
        incomingMessageDiv.classList.remove("thinking");
        isProcessingMessage = false; // Reset tr·∫°ng th√°i
        scrollToBottom();
    }
};

// H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng g·ª≠i tin nh·∫Øn
const handleOutgoingMessage = (e) => {
    e.preventDefault();
    
    // NgƒÉn ch·∫∑n g·ª≠i nhi·ªÅu l·∫ßn
    if (isProcessingMessage) {
        return;
    }
    
    // L·∫•y n·ªôi dung tin nh·∫Øn v√† ki·ªÉm tra ƒëi·ªÅu ki·ªán g·ª≠i
    const messageText = messageInput.value.trim();
    const hasImage = userData.file && userData.file.data;
    
    // Cho ph√©p g·ª≠i n·∫øu c√≥ text ho·∫∑c c√≥ ·∫£nh
    if (!messageText && !hasImage) {
        messageInput.focus();
        return;
    }
    
    // ƒê√°nh d·∫•u ƒëang x·ª≠ l√Ω
    isProcessingMessage = true;
    
    // L∆∞u message v√†o userData
    userData.message = messageText;
    
    // X√≥a input v√† reset UI
    messageInput.value = "";
    messageInput.placeholder = "Nh·∫≠p tin nh·∫Øn...";
    messageInput.dispatchEvent(new Event("input"));

    // T·∫°o v√† hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
    let messageContent = `<div class="message-text">`;
    
    // Th√™m ·∫£nh tr∆∞·ªõc (nh∆∞ Zalo)
    if (hasImage) {
        messageContent += `<div class="message-image">
            <img src="data:${userData.file.mime_type};base64,${userData.file.data}" 
                 class="chat-image" 
                 onclick="openImageModal(this.src)" 
                 alt="Uploaded image" />
        </div>`;
    }
    
    // Th√™m text sau ·∫£nh
    if (messageText) {
        messageContent += `<div class="message-text-content">${messageText}</div>`;
    } else {
        messageContent += `<div class="message-text-content"><em>ƒê√£ g·ª≠i ·∫£nh ƒë·ªÉ AI ph√¢n t√≠ch</em></div>`;
    }
    
    messageContent += `</div>`;

    const outgoingMessageDiv = createMessageElement(messageContent, "user-message");
    chatBody.appendChild(outgoingMessageDiv);
    chatBody.scrollTop = chatBody.scrollHeight;

    // Ki·ªÉm tra xem c√≥ ph·∫£i l·ªánh /taosodo kh√¥ng
    const isSoDoCommand = checkAndHandleSoDoCommand(userData.message);

    // N·∫øu l√† l·ªánh /taosodo, ch·ªâ t·∫°o s∆° ƒë·ªì, kh√¥ng g·ª≠i tin nh·∫Øn t·ªõi chatbot
    if (isSoDoCommand) {
        // Ch·ªâ t·∫°o s∆° ƒë·ªì, kh√¥ng g·ªçi API chatbot
        isProcessingMessage = false; // Reset tr·∫°ng th√°i
        return;
    }

    // Hi·ªÉn th·ªã tr·∫°ng th√°i "bot ƒëang suy nghƒ©" sau 0.6s
    setTimeout(() => {
        // L·∫•y avatar t·ª´ localStorage ho·∫∑c d√πng m·∫∑c ƒë·ªãnh
        const botAvatarUrl = localStorage.getItem('botAvatarUrl') || 'https://i.pinimg.com/736x/1b/9d/20/1b9d203c25c64fac1117c96309808415.jpg';

        // T·∫°o n·ªôi dung tin nh·∫Øn "ƒëang suy nghƒ©"
        const messageContent = `
            <img class="bot-avatar" src="${botAvatarUrl}" alt="Bot Avatar">
            <div class="message-text">
                <div class="thinking-indicator">
                    <div class="dot"></div>
                    <div class="dot"></div>
                    <div class="dot"></div>
                </div>
            </div>`;

        const incomingMessageDiv = createMessageElement(messageContent, "bot-message", "thinking");
        chatBody.appendChild(incomingMessageDiv);
        scrollToBottom();

        // X·ª≠ l√Ω n·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c avatar
        const avatarImg = incomingMessageDiv.querySelector('.bot-avatar');
        avatarImg.onerror = function() {
            this.src = 'https://i.pinimg.com/736x/1b/9d/20/1b9d203c25c64fac1117c96309808415.jpg';
        };

        // G·ªçi API ƒë·ªÉ l·∫•y ph·∫£n h·ªìi t·ª´ bot
        generateBotResponse(incomingMessageDiv);
    }, 600);
};
function updateBotAvatar(newAvatarUrl) {
    // L∆∞u v√†o localStorage ƒë·ªÉ gi·ªØ avatar khi refresh trang
    localStorage.setItem('botAvatarUrl', newAvatarUrl);

    // C·∫≠p nh·∫≠t t·∫•t c·∫£ avatar bot trong chat
    document.querySelectorAll('.bot-avatar').forEach(avatar => {
        avatar.src = newAvatarUrl;
    });
}

// X·ª≠ l√Ω s·ª± ki·ªán nh·∫•n Enter ƒë·ªÉ g·ª≠i tin nh·∫Øn
messageInput.addEventListener("keydown", (e) => {
    const userMessage = e.target.value.trim();
    const hasImage = userData.file && userData.file.data;
    
    // Cho ph√©p g·ª≠i n·∫øu c√≥ text ho·∫∑c c√≥ ·∫£nh
    if (e.key === "Enter" && (userMessage || hasImage) && !e.shiftKey && window.innerWidth > 768) {
        handleOutgoingMessage(e);
    }
});

// T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh chi·ªÅu cao √¥ nh·∫≠p tin nh·∫Øn
messageInput.addEventListener("input", (e) => {
    messageInput.style.height = `${initialInputHeight}px`;
    messageInput.style.height = `${messageInput.scrollHeight}px`;
    document.querySelector(".chat-form").style.boderRadius = messageInput.scrollHeight > initialInputHeight ? "15px" : "32px";
});

// X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn file
fileInput.addEventListener("change", async (e) => {
    const file = e.target.files[0];
    if (!file) return;
    const validImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
    if (!validImageTypes.includes(file.type)) {
        // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói n·∫øu file kh√¥ng h·ª£p l·ªá v·ªõi z-index cao nh·∫•t
        await Swal.fire({
            icon: 'error',
            title: 'L·ªói',
            text: 'Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh (JPEG, PNG, GIF, WEBP)',
            confirmButtonText: 'OK',
            customClass: {
                popup: 'high-z-index-swal' // Th√™m class custom cho popup
            },
            didOpen: () => {
                // ƒê·∫£m b·∫£o popup lu√¥n hi·ªÉn th·ªã tr√™n t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ kh√°c
                const popup = Swal.getPopup();
                popup.style.zIndex = '999999';
            }
        });
        resetFileInput();
        return;
    }
    const reader = new FileReader();
    reader.onload = (e) => {
        fileUploadWrapper.querySelector("img").src = e.target.result;
        fileUploadWrapper.classList.add("file-uploaded");
        const base64String = e.target.result.split(",")[1];
        userData.file = {
            data: base64String,
            mime_type: file.type
        };
        
        // C·∫≠p nh·∫≠t placeholder ƒë·ªÉ h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng
        if (!messageInput.value.trim()) {
            messageInput.placeholder = "Nh·∫≠p y√™u c·∫ßu v·ªÅ ·∫£nh (t√πy ch·ªçn) ho·∫∑c nh·∫•n Enter ƒë·ªÉ g·ª≠i";
        }
    };
    reader.readAsDataURL(file);
});

// X·ª≠ l√Ω khi nh·∫•n n√∫t h·ªßy file
fileCancelButton.addEventListener("click", (e) => {
    userData.file = {};
    fileUploadWrapper.classList.remove("file-uploaded");
});

// Hi·ªÉn th·ªã tin nh·∫Øn ch√†o m·ª´ng khi trang ƒë∆∞·ª£c t·∫£i
document.addEventListener('DOMContentLoaded', () => {
    // Ch·ªâ hi·ªÉn th·ªã tin nh·∫Øn ch√†o m·ª´ng n·∫øu ch∆∞a c√≥ tin nh·∫Øn n√†o
    if (chatBody.children.length === 0) {
        showWelcomeMessage();
    }
});

// ƒê√£ b·ªè t√≠nh nƒÉng emoji picker

// G√°n s·ª± ki·ªán cho c√°c n√∫t
sendMessageButton.addEventListener("click", (e) => handleOutgoingMessage(e));
document.querySelector("#file-upload").addEventListener("click", (e) => fileInput.click());

// H√†m thay ƒë·ªïi logo v√† avatar chatbot
function updateChatbotImages(logoUrl, avatarUrl) {
    // C·∫≠p nh·∫≠t logo
    const logo = document.querySelector('.chatbot-logo');
    if (logo) {
        logo.src = logoUrl;
        logo.onerror = function() {
            logo.src = 'https://i.pinimg.com/736x/1b/9d/20/1b9d203c25c64fac1117c96309808415.jpg';
        };
    }

    // C·∫≠p nh·∫≠t avatar
    const avatar = document.querySelector('.bot-avatar');
    if (avatar) {
        avatar.src = avatarUrl;
        avatar.onerror = function() {
            avatar.src = 'https://i.pinimg.com/736x/1b/9d/20/1b9d203c25c64fac1117c96309808415.jpg';
        };
    }
}

// S·ª± ki·ªán m·ªü/ƒë√≥ng diagram modal
const createDiagramBtn = document.getElementById('create-diagram-btn');
const diagramModal = document.getElementById('diagram-modal');
const closeDiagramModal = document.getElementById('close-diagram-modal');
const generateDiagramBtn = document.getElementById('generate-diagram-btn');
const diagramDescription = document.getElementById('diagram-description');

createDiagramBtn.addEventListener('click', () => {
    diagramModal.classList.add('show');
    diagramDescription.focus();
});

closeDiagramModal.addEventListener('click', () => {
    diagramModal.classList.remove('show');
    document.getElementById('diagram-result').style.display = 'none';
    diagramDescription.value = '';
});

// ƒê√≥ng modal khi click b√™n ngo√†i
diagramModal.addEventListener('click', (e) => {
    if (e.target === diagramModal) {
        diagramModal.classList.remove('show');
        document.getElementById('diagram-result').style.display = 'none';
        diagramDescription.value = '';
    }
});

// X·ª≠ l√Ω t·∫°o s∆° ƒë·ªì
generateDiagramBtn.addEventListener('click', async () => {
    const description = diagramDescription.value.trim();
    if (!description) {
        Swal.fire('L·ªói', 'Vui l√≤ng nh·∫≠p m√¥ t·∫£ s∆° ƒë·ªì!', 'warning');
        return;
    }

    // Hi·ªÉn th·ªã loading
    generateDiagramBtn.disabled = true;
    generateDiagramBtn.innerHTML = '<span class="material-symbols-rounded">hourglass_empty</span> ƒêang t·∫°o...';

    try {
        // G·ªçi API t·∫°o s∆° ƒë·ªì tr·ª±c ti·∫øp
        const result = await window.soDoGenerator.generateSoDo(description);
        
        if (result.success) {
            // Hi·ªÉn th·ªã k·∫øt qu·∫£ trong modal
            const resultDiv = document.getElementById('diagram-result');
            resultDiv.style.display = 'block';
            resultDiv.innerHTML = `
                <div class="diagram-message">
                    <div class="diagram-header">
                        <div class="diagram-title">
                            <span class="material-symbols-rounded">account_tree</span>
                            S∆° ƒë·ªì ƒë√£ t·∫°o
                        </div>
                        <div class="diagram-actions">
                            <button class="diagram-action-btn" onclick="downloadDiagram('${encodeURIComponent(result.mermaidCode)}')">
                                <span class="material-symbols-rounded">download</span>
                                T·∫£i xu·ªëng
                            </button>
                            <button class="diagram-action-btn" onclick="viewDiagramDetail('${encodeURIComponent(result.mermaidCode)}')">
                                <span class="material-symbols-rounded">visibility</span>
                                Xem chi ti·∫øt
                            </button>
                        </div>
                    </div>
                    <div class="diagram-content" id="modal-diagram-content">
                        <!-- S∆° ƒë·ªì s·∫Ω ƒë∆∞·ª£c render ·ªü ƒë√¢y -->
                    </div>
                </div>
            `;

            // Render s∆° ƒë·ªì
            await window.soDoGenerator.renderMermaidDiagram(result.mermaidCode, 'modal-diagram-content', false);

            // Th√™m s∆° ƒë·ªì v√†o chat
            addDiagramToChat(description, result.mermaidCode);

        } else {
            throw new Error(result.error || 'Kh√¥ng th·ªÉ t·∫°o s∆° ƒë·ªì');
        }
    } catch (error) {
        Swal.fire('L·ªói', error.message || 'Kh√¥ng th·ªÉ t·∫°o s∆° ƒë·ªì. Vui l√≤ng th·ª≠ l·∫°i!', 'error');
        // console.error('Diagram generation error:', error);
    } finally {
        // Kh√¥i ph·ª•c n√∫t
        generateDiagramBtn.disabled = false;
        generateDiagramBtn.innerHTML = '<span class="material-symbols-rounded">account_tree</span> T·∫°o S∆° ƒê·ªì';
    }
});

// H√†m th√™m s∆° ƒë·ªì v√†o chat
function addDiagramToChat(description, mermaidCode) {
    const botAvatarUrl = localStorage.getItem('botAvatarUrl') || 'https://i.pinimg.com/736x/1b/9d/20/1b9d203c25c64fac1117c96309808415.jpg';
    
    const messageContent = `
        <img class="bot-avatar" src="${botAvatarUrl}" alt="Bot Avatar">
        <div class="message-text">
            <p><strong>ƒê√£ t·∫°o s∆° ƒë·ªì cho:</strong> ${description}</p>
            <div class="diagram-message">
                <div class="diagram-header">
                    <div class="diagram-title">
                        <span class="material-symbols-rounded">account_tree</span>
                        S∆° ƒë·ªì kh·ªëi
                    </div>
                    <div class="diagram-actions">
                        <button class="diagram-action-btn" onclick="downloadDiagram('${encodeURIComponent(mermaidCode)}')">
                            <span class="material-symbols-rounded">download</span>
                            T·∫£i xu·ªëng
                        </button>
                        <button class="diagram-action-btn" onclick="viewDiagramDetail('${encodeURIComponent(mermaidCode)}')">
                            <span class="material-symbols-rounded">visibility</span>
                            Xem chi ti·∫øt
                        </button>
                    </div>
                </div>
                <div class="diagram-content" id="chat-diagram-${Date.now()}">
                    <!-- S∆° ƒë·ªì s·∫Ω ƒë∆∞·ª£c render ·ªü ƒë√¢y -->
                </div>
            </div>
        </div>`;

    const diagramMessageDiv = createMessageElement(messageContent, "bot-message");
    chatBody.appendChild(diagramMessageDiv);
    
    // X·ª≠ l√Ω n·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c avatar
    const avatarImg = diagramMessageDiv.querySelector('.bot-avatar');
    avatarImg.onerror = function() {
        this.src = 'https://i.pinimg.com/736x/1b/9d/20/1b9d203c25c64fac1117c96309808415.jpg';
    };
    
    // Render s∆° ƒë·ªì
    window.soDoGenerator.renderMermaidDiagram(mermaidCode, `chat-diagram-${Date.now()}`, false);
    
    scrollToBottom();
}

// H√†m t·∫£i xu·ªëng s∆° ƒë·ªì
function downloadDiagram(encodedCode) {
    try {
        const mermaidCode = decodeURIComponent(encodedCode);
        if (window.soDoGenerator && typeof window.soDoGenerator.downloadDiagram === 'function') {
            window.soDoGenerator.downloadDiagram(mermaidCode);
        } else {
            // console.error('SoDoGenerator not available');
            Swal.fire('L·ªói', 'T√≠nh nƒÉng t·∫£i xu·ªëng kh√¥ng kh·∫£ d·ª•ng', 'error');
        }
    } catch (error) {
        // console.error('Error downloading diagram:', error);
        Swal.fire('L·ªói', 'Kh√¥ng th·ªÉ t·∫£i xu·ªëng s∆° ƒë·ªì', 'error');
    }
}

// H√†m xem chi ti·∫øt s∆° ƒë·ªì
function viewDiagramDetail(encodedCode) {
    try {
        const mermaidCode = decodeURIComponent(encodedCode);
        
        // T·∫°o modal chi ti·∫øt tr·ª±c ti·∫øp
        const detailModal = document.createElement('div');
        detailModal.className = 'diagram-detail-modal';
        detailModal.innerHTML = `
            <div class="diagram-detail-content">
                <div class="diagram-detail-header">
                    <h3>Xem chi ti·∫øt s∆° ƒë·ªì</h3>
                    <button class="diagram-detail-close" onclick="closeDetailModal()">
                        <span class="material-symbols-rounded">close</span>
                    </button>
                </div>
                <div class="diagram-detail-body">
                    <div class="diagram-detail-preview">
                        <div class="diagram-detail-zoom-container" id="detail-zoom-container">
                            <div class="diagram-detail-zoom-content" id="detail-zoom-content"></div>
                        </div>
                    </div>
                    <div class="diagram-detail-actions">
                        <button class="diagram-detail-btn" onclick="downloadDiagram('${encodedCode}')">
                            <span class="material-symbols-rounded">download</span>
                            T·∫£i v·ªÅ
                        </button>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(detailModal);
        
        // ƒê√≥ng modal t·∫°o s∆° ƒë·ªì n·∫øu ƒëang m·ªü
        const diagramModal = document.getElementById('diagram-modal');
        if (diagramModal && diagramModal.classList.contains('show')) {
            diagramModal.classList.remove('show');
        }
        
        // Render s∆° ƒë·ªì v·ªõi zoom
        if (window.soDoGenerator && typeof window.soDoGenerator.renderMermaidDiagram === 'function') {
            window.soDoGenerator.renderMermaidDiagram(mermaidCode, 'detail-zoom-content', true);
        }
        
        // Thi·∫øt l·∫≠p event listeners
        setupDetailModalEvents(detailModal);
        
    } catch (error) {
        // console.error('Error viewing diagram detail:', error);
        Swal.fire('L·ªói', 'Kh√¥ng th·ªÉ xem chi ti·∫øt s∆° ƒë·ªì', 'error');
    }
}

// H√†m ƒë√≥ng modal chi ti·∫øt
function closeDetailModal() {
    const detailModal = document.querySelector('.diagram-detail-modal');
    if (detailModal) {
        document.body.removeChild(detailModal);
    }
}

// Thi·∫øt l·∫≠p events cho modal chi ti·∫øt
function setupDetailModalEvents(modal) {
    // ƒê√≥ng khi click b√™n ngo√†i
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeDetailModal();
        }
    });
    
    // ƒê√≥ng khi nh·∫•n ESC
    document.addEventListener('keydown', function closeOnEsc(e) {
        if (e.key === 'Escape') {
            closeDetailModal();
            document.removeEventListener('keydown', closeOnEsc);
        }
    });
}

// H√†m m·ªü modal xem ·∫£nh
function openImageModal(imageSrc) {
    Swal.fire({
        imageUrl: imageSrc,
        imageWidth: '80%',
        imageHeight: 'auto',
        imageAlt: 'H√¨nh ·∫£nh',
        showConfirmButton: false,
        showCloseButton: true,
        background: 'rgba(0, 0, 0, 0.9)',
        customClass: {
            popup: 'image-modal-popup',
            closeButton: 'image-modal-close'
        }
    });
}

// ========== ERROR HANDLING ========== //
function handleApiError(messageElement, error) {
    let msg = error.message || error.toString();
    
    // D·ªãch c√°c l·ªói ph·ªï bi·∫øn sang ti·∫øng Vi·ªát
    if (msg.includes('overloaded') || msg.includes('quota')) {
        msg = 'H·ªá th·ªëng AI ƒëang qu√° t·∫£i ho·∫∑c h·∫øt quota. Vui l√≤ng th·ª≠ l·∫°i sau v√†i ph√∫t!';
    } else if (msg.includes('network') || msg.includes('fetch')) {
        msg = 'L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet v√† th·ª≠ l·∫°i!';
    } else if (msg.includes('timeout')) {
        msg = 'Y√™u c·∫ßu b·ªã timeout. Vui l√≤ng th·ª≠ l·∫°i!';
    } else if (msg.includes('API key')) {
        msg = 'L·ªói x√°c th·ª±c API. Vui l√≤ng li√™n h·ªá admin ƒë·ªÉ ki·ªÉm tra!';
    } else if (msg.includes('rate limit')) {
        msg = 'Qu√° nhi·ªÅu y√™u c·∫ßu. Vui l√≤ng ch·ªù m·ªôt ch√∫t r·ªìi th·ª≠ l·∫°i!';
    } else if (msg.includes('content') || msg.includes('inappropriate')) {
        msg = 'N·ªôi dung kh√¥ng ph√π h·ª£p. Vui l√≤ng th·ª≠ l·∫°i v·ªõi c√¢u h·ªèi kh√°c!';
    }
    
    messageElement.innerHTML = `
        <div style="color:#ff6b6b; background:#2d2d3a; padding:1em; border-radius:8px; border-left:4px solid #ff6b6b;">
            <strong>‚ùå L·ªói:</strong> ${msg}
        </div>
    `;
    
    // Reset tr·∫°ng th√°i x·ª≠ l√Ω khi c√≥ l·ªói
    isProcessingMessage = false;
}

// ========== UI & RENDER ========== //
function scrollToBottom() {
    chatBody.scrollTo({ behavior: "smooth", top: chatBody.scrollHeight });
}
function resetFileInput() {
    fileInput.value = "";
    fileUploadWrapper.classList.remove("file-uploaded");
    const img = fileUploadWrapper.querySelector("img");
    if (img) img.src = "#";
    userData.file = { data: null, mime_type: null };
    const form = document.querySelector(".chat-form");
    if (form) form.reset();
}
